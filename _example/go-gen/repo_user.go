/*
 *  Copyright (c) 2022-2025 Mikhail Knyazhev <markus621@yandex.com>. All rights reserved.
 *  Use of this source code is governed by a BSD 3-Clause license that can be found in the LICENSE file.
 */

// Code generated by goppy-cli for goppy.orm. DO NOT EDIT.
package go_gen

import (
	"context"

	"go.osspkg.com/goppy/v2/orm"
)

const sqlCreateUser = `INSERT INTO "users" ("name", "value", "meta0") VALUES ($1, $2, $3)`

func (v *Repo) CreateBulkUser(ctx context.Context, ms []*User, opts ...CreateOption) error {
	if len(ms) == 0 {
		return nil
	}
	buf := _sqlBuilderPool.Get()
	defer func() { _sqlBuilderPool.Put(buf) }()
	buf.WriteString(sqlCreateUser)
	for _, o := range opts {
		o(buf)
	}
	buf.WriteString(` RETURNING ("id")`)
	buf.WriteString(";")
	return v.Master().Tx(ctx, "users_create_bulk", func(tx orm.Tx) {
		for _, m := range ms {
			tx.Query(func(q orm.Querier) {
				q.SQL(buf.String(), m.Name, m.Value, m.Meta0)
				q.Bind(func(bind orm.Scanner) error {
					return bind.Scan(&m.Id)
				})
			})
		}
	})
}
func (v *Repo) CreateUser(ctx context.Context, m *User, opts ...CreateOption) error {
	buf := _sqlBuilderPool.Get()
	defer func() { _sqlBuilderPool.Put(buf) }()
	buf.WriteString(sqlCreateUser)
	for _, o := range opts {
		o(buf)
	}
	buf.WriteString(` RETURNING ("id")`)
	buf.WriteString(";")
	return v.Master().Query(ctx, "users_create", func(q orm.Querier) {
		q.SQL(buf.String(), m.Name, m.Value, m.Meta0)
		q.Bind(func(bind orm.Scanner) error {
			return bind.Scan(&m.Id)
		})
	})
}

const sqlSelectCursorUser = `SELECT "id", "name", "value", "meta0" FROM "users" WHERE "id">$1 ORDER BY "id" LIMIT $2;`

func (v *Repo) SelectUserCursor(ctx context.Context, from int64, lim uint) ([]User, error) {
	result := make([]User, 0, lim)
	err := v.Sync().Query(ctx, "users_read_all", func(q orm.Querier) {
		q.SQL(sqlSelectCursorUser, from, lim)
		q.Bind(func(bind orm.Scanner) error {
			m := User{}
			if e := bind.Scan(&m.Id, &m.Name, &m.Value, &m.Meta0); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectUserById = `SELECT "id", "name", "value", "meta0" FROM "users" WHERE "id"=ANY($1);`

func (v *Repo) SelectUserById(ctx context.Context, args ...int64) ([]User, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]User, 0, len(args))
	err := v.Sync().Query(ctx, "users_read_by_id", func(q orm.Querier) {
		q.SQL(sqlSelectUserById, args)
		q.Bind(func(bind orm.Scanner) error {
			m := User{}
			if e := bind.Scan(&m.Id, &m.Name, &m.Value, &m.Meta0); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectUserByName = `SELECT "id", "name", "value", "meta0" FROM "users" WHERE "name"=ANY($1);`

func (v *Repo) SelectUserByName(ctx context.Context, args ...string) ([]User, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]User, 0, len(args))
	err := v.Sync().Query(ctx, "users_read_by_name", func(q orm.Querier) {
		q.SQL(sqlSelectUserByName, args)
		q.Bind(func(bind orm.Scanner) error {
			m := User{}
			if e := bind.Scan(&m.Id, &m.Name, &m.Value, &m.Meta0); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectUserByValue = `SELECT "id", "name", "value", "meta0" FROM "users" WHERE "value"=ANY($1);`

func (v *Repo) SelectUserByValue(ctx context.Context, args ...string) ([]User, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]User, 0, len(args))
	err := v.Sync().Query(ctx, "users_read_by_value", func(q orm.Querier) {
		q.SQL(sqlSelectUserByValue, args)
		q.Bind(func(bind orm.Scanner) error {
			m := User{}
			if e := bind.Scan(&m.Id, &m.Name, &m.Value, &m.Meta0); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectUserByMeta0 = `SELECT "id", "name", "value", "meta0" FROM "users" WHERE "meta0"=ANY($1);`

func (v *Repo) SelectUserByMeta0(ctx context.Context, args ...Meta) ([]User, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]User, 0, len(args))
	err := v.Sync().Query(ctx, "users_read_by_meta0", func(q orm.Querier) {
		q.SQL(sqlSelectUserByMeta0, args)
		q.Bind(func(bind orm.Scanner) error {
			m := User{}
			if e := bind.Scan(&m.Id, &m.Name, &m.Value, &m.Meta0); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlUpdateUserById = `UPDATE "users" SET "meta0"=$3, "name"=$1, "value"=$2 WHERE "id"=$4;`

func (v *Repo) UpdateUserById(ctx context.Context, ms ...*User) error {
	if len(ms) == 0 {
		return nil
	}
	if len(ms) == 1 {
		return v.Master().Exec(ctx, "users_update_by_id", func(e orm.Executor) {
			e.SQL(sqlUpdateUserById, ms[0].Name, ms[0].Value, ms[0].Meta0, ms[0].Id)
		})
	}
	return v.Master().Tx(ctx, "users_update_bulk_by_id", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlUpdateUserById)
			for _, m := range ms {
				e.Params(m.Name, m.Value, m.Meta0, m.Id)
			}
		})
	})
}

const sqlDeleteUserById = `DELETE FROM "users" WHERE "id"=ANY($1);`

func (v *Repo) DeleteUserById(ctx context.Context, ms ...int64) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "users_delete_by_id", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteUserById, ms)
		})
	})
}

const sqlDeleteUserByName = `DELETE FROM "users" WHERE "name"=ANY($1);`

func (v *Repo) DeleteUserByName(ctx context.Context, ms ...string) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "users_delete_by_name", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteUserByName, ms)
		})
	})
}

const sqlDeleteUserByValue = `DELETE FROM "users" WHERE "value"=ANY($1);`

func (v *Repo) DeleteUserByValue(ctx context.Context, ms ...string) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "users_delete_by_value", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteUserByValue, ms)
		})
	})
}

const sqlDeleteUserByMeta0 = `DELETE FROM "users" WHERE "meta0"=ANY($1);`

func (v *Repo) DeleteUserByMeta0(ctx context.Context, ms ...Meta) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "users_delete_by_meta0", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteUserByMeta0, ms)
		})
	})
}
