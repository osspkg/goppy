/*
 *  Copyright (c) 2022-2025 Mikhail Knyazhev <markus621@yandex.com>. All rights reserved.
 *  Use of this source code is governed by a BSD 3-Clause license that can be found in the LICENSE file.
 */

// Code generated by goppy-cli for goppy.orm. DO NOT EDIT.
package go_gen

import (
	"fmt"
	"strings"

	"go.osspkg.com/ioutils/pool"

	"go.osspkg.com/goppy/v2/orm"
)

type Repo struct {
	orm        orm.ORM
	rtag, wtag string
}

func NewRepo(orm orm.ORM) *Repo {
	return &Repo{
		orm:  orm,
		rtag: "slave",
		wtag: "master",
	}
}
func (v *Repo) Sync() orm.Stmt   { return v.orm.Tag(v.rtag) }
func (v *Repo) Master() orm.Stmt { return v.orm.Tag(v.wtag) }

var _sqlBuilderPool = pool.New[*strings.Builder](func() *strings.Builder {
	return new(strings.Builder)
})

type ReadOption func(b *strings.Builder)

func Limit(arg uint64) ReadOption {
	return func(b *strings.Builder) { fmt.Fprintf(b, " LIMIT %d ", arg) }
}

type CreateOption func(b *strings.Builder)

func ConflictIgnore() CreateOption {
	return func(b *strings.Builder) { b.WriteString(" ON CONFLICT DO NOTHING ") }
}
func ConflictUpdate(fields []string, ups []string) CreateOption {
	return func(b *strings.Builder) {
		result := make([]string, 0, len(fields))
		for _, value := range fields {
			result = append(result, "\""+strings.TrimSpace(value)+"\"")
		}
		fmt.Fprintf(b, " ON CONFLICT(%s) DO UPDATE SET ", strings.Join(result, ", "))
		j := len(ups) - 1
		for i, up := range ups {
			up = strings.TrimSpace(up)
			fmt.Fprintf(b, "\"%s\" = EXCLUDED.\"%s\"", up, up)
			if i < j {
				b.WriteString(",")
			}
		}
	}
}
