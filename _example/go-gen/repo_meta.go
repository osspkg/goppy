/*
 *  Copyright (c) 2022-2025 Mikhail Knyazhev <markus621@yandex.com>. All rights reserved.
 *  Use of this source code is governed by a BSD 3-Clause license that can be found in the LICENSE file.
 */

// Code generated by goppy-cli for goppy.orm. DO NOT EDIT.
package go_gen

import (
	"context"
	time "time"

	uuid "github.com/google/uuid"

	"go.osspkg.com/goppy/v2/orm"
)

const sqlCreateMeta = `INSERT INTO "meta" ("uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at") VALUES ($1, $2, $3, $4, $5, $6, $7);`

func (v *Repo) CreateBulkMeta(ctx context.Context, ms []Meta, opts ...CreateOption) error {
	if len(ms) == 0 {
		return nil
	}
	for _, m := range ms {
		m.UID = uuid.New()
		m.CreatedAt = time.Now()
	}
	buf := _sqlBuilderPool.Get()
	defer func() { _sqlBuilderPool.Put(buf) }()
	buf.WriteString(sqlCreateMeta)
	for _, o := range opts {
		o(buf)
	}
	buf.WriteString(` RETURNING ("id");`)
	return v.Master().Tx(ctx, "meta_create_bulk", func(tx orm.Tx) {
		for _, m := range ms {
			tx.Query(func(q orm.Querier) {
				q.SQL(buf.String(), m.UID, m.UserId, m.Roles, m.Fail, m.CreatedAt, m.UpdatedAt, m.DeletedAt)
				q.Bind(func(bind orm.Scanner) error {
					return bind.Scan(&m.Id)
				})
			})
		}
	})
}
func (v *Repo) CreateMeta(ctx context.Context, m Meta, opts ...CreateOption) error {
	m.UID = uuid.New()
	m.CreatedAt = time.Now()
	buf := _sqlBuilderPool.Get()
	defer func() { _sqlBuilderPool.Put(buf) }()
	buf.WriteString(sqlCreateMeta)
	for _, o := range opts {
		o(buf)
	}
	buf.WriteString(` RETURNING ("id");`)
	return v.Master().Query(ctx, "meta_create", func(q orm.Querier) {
		q.SQL(buf.String(), m.UID, m.UserId, m.Roles, m.Fail, m.CreatedAt, m.UpdatedAt, m.DeletedAt)
		q.Bind(func(bind orm.Scanner) error {
			return bind.Scan(&m.Id)
		})
	})
}

const sqlSelectCursorMeta = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "id">$1 ORDER BY "id" LIMIT $2;`

func (v *Repo) SelectMetaCursor(ctx context.Context, from int64, lim uint) ([]Meta, error) {
	result := make([]Meta, 0, lim)
	err := v.Sync().Query(ctx, "meta_read_all", func(q orm.Querier) {
		q.SQL(sqlSelectCursorMeta, from, lim)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaById = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "id"=ANY($1);`

func (v *Repo) SelectMetaById(ctx context.Context, args ...int64) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_id", func(q orm.Querier) {
		q.SQL(sqlSelectMetaById, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaByUID = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "uid"=ANY($1);`

func (v *Repo) SelectMetaByUID(ctx context.Context, args ...uuid.UUID) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_uid", func(q orm.Querier) {
		q.SQL(sqlSelectMetaByUID, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaByUserId = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "user_id"=ANY($1);`

func (v *Repo) SelectMetaByUserId(ctx context.Context, args ...int64) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_user_id", func(q orm.Querier) {
		q.SQL(sqlSelectMetaByUserId, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaByRoles = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "roles"=ANY($1);`

func (v *Repo) SelectMetaByRoles(ctx context.Context, args ...string) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_roles", func(q orm.Querier) {
		q.SQL(sqlSelectMetaByRoles, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaByFail = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "fail"=ANY($1);`

func (v *Repo) SelectMetaByFail(ctx context.Context, args ...bool) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_fail", func(q orm.Querier) {
		q.SQL(sqlSelectMetaByFail, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaByCreatedAt = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "created_at"=ANY($1);`

func (v *Repo) SelectMetaByCreatedAt(ctx context.Context, args ...time.Time) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_created_at", func(q orm.Querier) {
		q.SQL(sqlSelectMetaByCreatedAt, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaByUpdatedAt = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "updated_at"=ANY($1);`

func (v *Repo) SelectMetaByUpdatedAt(ctx context.Context, args ...time.Time) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_updated_at", func(q orm.Querier) {
		q.SQL(sqlSelectMetaByUpdatedAt, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectMetaByDeletedAt = `SELECT "id", "uid", "user_id", "roles", "fail", "created_at", "updated_at", "deleted_at" FROM "meta" WHERE "deleted_at"=ANY($1);`

func (v *Repo) SelectMetaByDeletedAt(ctx context.Context, args ...time.Time) ([]Meta, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]Meta, 0, len(args))
	err := v.Sync().Query(ctx, "meta_read_by_deleted_at", func(q orm.Querier) {
		q.SQL(sqlSelectMetaByDeletedAt, args)
		q.Bind(func(bind orm.Scanner) error {
			m := Meta{}
			if e := bind.Scan(&m.Id, &m.UID, &m.UserId, &m.Roles, &m.Fail, &m.CreatedAt, &m.UpdatedAt, &m.DeletedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlUpdateMetaById = `UPDATE "meta" SET "created_at"=$5, "deleted_at"=$7, "fail"=$4, "roles"=$3, "uid"=$1, "updated_at"=$6, "user_id"=$2 WHERE "id"=$8;`

func (v *Repo) UpdateMetaById(ctx context.Context, ms ...Meta) error {
	if len(ms) == 0 {
		return nil
	}
	if len(ms) == 1 {
		return v.Master().Exec(ctx, "meta_update_by_id", func(e orm.Executor) {
			e.SQL(sqlUpdateMetaById, ms[0].UID, ms[0].UserId, ms[0].Roles, ms[0].Fail, ms[0].CreatedAt, ms[0].UpdatedAt, ms[0].DeletedAt, ms[0].Id)
		})
	}
	return v.Master().Tx(ctx, "meta_update_bulk_by_id", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlUpdateMetaById)
			for _, m := range ms {
				e.Params(m.UID, m.UserId, m.Roles, m.Fail, m.CreatedAt, m.UpdatedAt, m.DeletedAt, m.Id)
			}
		})
	})
}

const sqlDeleteMetaById = `DELETE FROM "meta" WHERE "id"=ANY($1);`

func (v *Repo) DeleteMetaById(ctx context.Context, ms ...int64) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_id", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaById, ms)
		})
	})
}

const sqlDeleteMetaByUID = `DELETE FROM "meta" WHERE "uid"=ANY($1);`

func (v *Repo) DeleteMetaByUID(ctx context.Context, ms ...uuid.UUID) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_uid", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaByUID, ms)
		})
	})
}

const sqlDeleteMetaByUserId = `DELETE FROM "meta" WHERE "user_id"=ANY($1);`

func (v *Repo) DeleteMetaByUserId(ctx context.Context, ms ...int64) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_user_id", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaByUserId, ms)
		})
	})
}

const sqlDeleteMetaByRoles = `DELETE FROM "meta" WHERE "roles"=ANY($1);`

func (v *Repo) DeleteMetaByRoles(ctx context.Context, ms ...string) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_roles", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaByRoles, ms)
		})
	})
}

const sqlDeleteMetaByFail = `DELETE FROM "meta" WHERE "fail"=ANY($1);`

func (v *Repo) DeleteMetaByFail(ctx context.Context, ms ...bool) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_fail", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaByFail, ms)
		})
	})
}

const sqlDeleteMetaByCreatedAt = `DELETE FROM "meta" WHERE "created_at"=ANY($1);`

func (v *Repo) DeleteMetaByCreatedAt(ctx context.Context, ms ...time.Time) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_created_at", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaByCreatedAt, ms)
		})
	})
}

const sqlDeleteMetaByUpdatedAt = `DELETE FROM "meta" WHERE "updated_at"=ANY($1);`

func (v *Repo) DeleteMetaByUpdatedAt(ctx context.Context, ms ...time.Time) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_updated_at", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaByUpdatedAt, ms)
		})
	})
}

const sqlDeleteMetaByDeletedAt = `DELETE FROM "meta" WHERE "deleted_at"=ANY($1);`

func (v *Repo) DeleteMetaByDeletedAt(ctx context.Context, ms ...time.Time) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "meta_delete_by_deleted_at", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteMetaByDeletedAt, ms)
		})
	})
}
