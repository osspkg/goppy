// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package token

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"

	algorithm "go.osspkg.com/goppy/v2/auth/token/algorithm"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGoOsspkgComGoppyV2AuthToken(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "alg":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Algorithm = algorithm.Name(in.String())
			}
		case "typ":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TokenType = Type(in.String())
			}
		case "jti":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TokenID = string(in.String())
			}
		case "iss":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Issuer = string(in.String())
			}
		case "kid":
			if in.IsNull() {
				in.Skip()
			} else {
				out.KeyID = string(in.String())
			}
		case "aud":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Audience = string(in.String())
			}
		case "iat":
			if in.IsNull() {
				in.Skip()
			} else {
				out.IssuedAt = int64(in.Int64())
			}
		case "exp":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ExpiresAt = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoOsspkgComGoppyV2AuthToken(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Algorithm))
	}
	{
		const prefix string = ",\"typ\":"
		out.RawString(prefix)
		out.String(string(in.TokenType))
	}
	if in.TokenID != "" {
		const prefix string = ",\"jti\":"
		out.RawString(prefix)
		out.String(string(in.TokenID))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		out.RawString(prefix)
		out.String(string(in.Issuer))
	}
	if in.KeyID != "" {
		const prefix string = ",\"kid\":"
		out.RawString(prefix)
		out.String(string(in.KeyID))
	}
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		out.RawString(prefix)
		out.String(string(in.Audience))
	}
	{
		const prefix string = ",\"iat\":"
		out.RawString(prefix)
		out.Int64(int64(in.IssuedAt))
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExpiresAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Header) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoOsspkgComGoppyV2AuthToken(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Header) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoOsspkgComGoppyV2AuthToken(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Header) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoOsspkgComGoppyV2AuthToken(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Header) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoOsspkgComGoppyV2AuthToken(l, v)
}
