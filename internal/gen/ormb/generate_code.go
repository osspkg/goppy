/*
 *  Copyright (c) 2022-2025 Mikhail Knyazhev <markus621@yandex.com>. All rights reserved.
 *  Use of this source code is governed by a BSD 3-Clause license that can be found in the LICENSE file.
 */

package ormb

import (
	"fmt"
	"os"
	"strings"

	"go.osspkg.com/ioutils/data"
	"golang.org/x/exp/slices"

	"go.osspkg.com/goppy/v2/internal/gen/ormb/common"
	"go.osspkg.com/goppy/v2/internal/gen/ormb/dialects"
	"go.osspkg.com/goppy/v2/internal/gen/ormb/visitor"
)

func GenerateCode(cc common.Config, vv *visitor.Visitor, g *dialects.Gen) error {
	ci := common.CodeInfo{
		FilePath: vv.FilePath,
		PkgName:  vv.PkgName,
		Imports:  nil,
	}

	for n, p := range vv.Imports.Yield() {
		ci.Imports = append(ci.Imports, common.Import{
			Name: n,
			Pkg:  p,
		})
	}

	slices.SortFunc(ci.Imports, func(a, b common.Import) int {
		switch {
		case a.Pkg == b.Pkg:
			return 0
		case a.Pkg < b.Pkg:
			return -1
		default:
			return 1
		}
	})

	{
		w := data.NewBuffer(1024)
		common.Writeln(w, `// Code generated by goppy-cli for goppy.orm. DO NOT EDIT.`)
		common.Writelnf(w, `package %s`, ci.PkgName)
		common.Writeln(w, `import (`)
		common.Writeln(w, `"context"`)
		common.Writeln(w, `"fmt"`)
		common.Writeln(w, `"strings"`)
		common.Writeln(w, `"go.osspkg.com/ioutils/pool"`)
		for _, imp := range ci.Imports {
			common.Writelnf(w, `%s "%s"`, imp.Name, imp.Pkg)
		}
		common.Writeln(w, `)`)
		common.Writeln(w, `type Repo struct {`)
		common.Writeln(w, `orm orm.ORM`)
		common.Writeln(w, `rtag, wtag string`)
		common.Writeln(w, `}`)
		common.Writeln(w, `func NewRepo(orm orm.ORM) *Repo {`)
		common.Writeln(w, `return &Repo{`)
		common.Writeln(w, `orm:  orm,`)
		common.Writelnf(w, `rtag: "%s",`, cc.DBRead)
		common.Writelnf(w, `wtag: "%s",`, cc.DBWrite)
		common.Writeln(w, `}`)
		common.Writeln(w, `}`)
		common.Writeln(w, `func (v *Repo) Sync() orm.Stmt { return v.orm.Tag(v.rtag) }`)
		common.Writeln(w, `func (v *Repo) Master() orm.Stmt { return v.orm.Tag(v.wtag) }`)
		common.Writeln(w, `var _sqlBuilderPool = pool.New[*strings.Builder](func() *strings.Builder {`)
		common.Writeln(w, `return new(strings.Builder)`)
		common.Writeln(w, `})`)
		common.Writeln(w, `type ReadOption func(b *strings.Builder)`)
		common.Writeln(w, `func Limit(arg uint64) ReadOption {`)
		common.Writeln(w, `return func(b *strings.Builder) {fmt.Fprintf(b, " LIMIT %d ", arg)}`)
		common.Writeln(w, `}`)
		common.Writeln(w, `type CreateOption func(b *strings.Builder)`)
		common.Writeln(w, `func ConflictIgnore() CreateOption {`)
		common.Writeln(w, `return func(b *strings.Builder) {b.WriteString(" ON CONFLICT DO NOTHING ")}`)
		common.Writeln(w, `}`)
		common.Writeln(w, `func ConflictUpdate(fields []string, ups []string) CreateOption {`)
		common.Writeln(w, `return func(b *strings.Builder) {`)

		colEsc := g.Escape.ColComma()
		if colEsc == `"` {
			colEsc = `\"`
		}

		common.Writeln(w, `result := make([]string, 0, len(fields))`)
		common.Writeln(w, `for _, value := range fields {`)
		common.Writelnf(w, `result = append(result, "%[1]s"+strings.TrimSpace(value)+"%[1]s")`, colEsc)
		common.Writeln(w, `}`)
		common.Writeln(w, `fmt.Fprintf(b, " ON CONFLICT(%s) DO UPDATE SET ", strings.Join(result, ", "))`)
		common.Writeln(w, `j := len(ups) - 1`)
		common.Writeln(w, `for i, up := range ups {`)
		common.Writeln(w, `up = strings.TrimSpace(up)`)
		common.Writelnf(w, `fmt.Fprintf(b, "%[1]s%%s%[1]s = EXCLUDED.%[1]s%%s%[1]s", up, up)`, colEsc)
		common.Writeln(w, `if i < j {`)
		common.Writeln(w, `b.WriteString(",")`)
		common.Writeln(w, `}`)
		common.Writeln(w, `}`)
		common.Writeln(w, `}`)
		common.Writeln(w, `}`)

		filePath := fmt.Sprintf("%s/repo_init.go", cc.CurrDir)
		if err := os.WriteFile(filePath, w.Bytes(), 0755); err != nil {
			return fmt.Errorf(`failed to write file "%s": %w`, filePath, err)
		}
	}

	for _, tab := range vv.Tables {
		filePath := fmt.Sprintf("%s/repo_%s.go", cc.CurrDir, strings.ToLower(tab.ModelName))
		if err := os.WriteFile(filePath, g.Code.Build(tab, ci), 0755); err != nil {
			return fmt.Errorf(`failed to write file "%s": %w`, filePath, err)
		}
	}

	return nil
}
